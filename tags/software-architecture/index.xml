<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software architecture | Antonela Tommasel</title>
    <link>/tags/software-architecture/</link>
      <atom:link href="/tags/software-architecture/index.xml" rel="self" type="application/rss+xml" />
    <description>Software architecture</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Wed, 02 Oct 2019 14:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>Software architecture</title>
      <link>/tags/software-architecture/</link>
    </image>
    
    <item>
      <title>Keeping one-step ahead of Architectural Smells: A Machine Learning application</title>
      <link>/talk/london2019/</link>
      <pubDate>Wed, 02 Oct 2019 14:00:00 +0000</pubDate>
      <guid>/talk/london2019/</guid>
      <description>&lt;h3 id=&#34;abstract-&#34;&gt;Abstract&lt;/h3&gt;
&lt;div style=&#34;text-align: justify&#34;&gt;
&lt;p&gt;Software systems naturally evolve, and this evolution often brings design problems that cause
system degradation. Architectural smells are typical symptoms of such problems, and several of
these smells are related to undesired dependencies among modules. The early detection of these
smells is important for developers, so they can plan ahead for maintenance or refactoring efforts,
thus preventing system degradation. Social Network Analysis (SNA) refers to a strategy for
investigating social structures using network and graph theories. The link prediction problem adapts
SNA techniques for studying to what extent the evolution of a network can be modelled by using
features intrinsic to the network. Since the module structure can be regarded as a network, i.e., a
dependency graph, we can leverage on network features to analyse the dynamics of such structure.
In this talk, we will explore how link prediction and machine learning techniques could help
anticipate architectural smells in future system versions. We will start with the basics of predicting
future dependencies, up to the application of time forecasting and machine learning models for
predicting the appearance of new architectural smells. Particularly, we will focus on two well-known
dependency-related smells, cyclic dependencies and hub-like dependency. Finally, we will discuss
some open issues and potential extensions.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Keeping one-step ahead of Architectural Smells: A Machine Learning application</title>
      <link>/talk/milano2018/</link>
      <pubDate>Thu, 06 Sep 2018 14:00:00 +0000</pubDate>
      <guid>/talk/milano2018/</guid>
      <description>&lt;h3 id=&#34;abstract-&#34;&gt;Abstract&lt;/h3&gt;
&lt;div style=&#34;text-align: justify&#34;&gt;
&lt;p&gt;Software systems naturally evolve, and this evolution often brings design problems that cause
system degradation. Architectural smells are typical symptoms of such problems, and several of
these smells are related to undesired dependencies among modules. The early detection of these
smells is important for developers, so they can plan ahead for maintenance or refactoring efforts,
thus preventing system degradation. Social Network Analysis (SNA) refers to a strategy for
investigating social structures using network and graph theories. The link prediction problem adapts
SNA techniques for studying to what extent the evolution of a network can be modelled by using
features intrinsic to the network. Since the module structure can be regarded as a network, i.e., a
dependency graph, we can leverage on network features to analyse the dynamics of such structure.
In this talk, we will explore how link prediction and machine learning techniques could help
anticipate architectural smells in future system versions. We will start with the basics of predicting
future dependencies, up to the application of time forecasting and machine learning models for
predicting the appearance of new architectural smells. Particularly, we will focus on two well-known
dependency-related smells, cyclic dependencies and hub-like dependency. Finally, we will discuss
some open issues and potential extensions.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Personalized architectural documentation based on stakeholdersâ€™ information needs</title>
      <link>/publication/2014jserd/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
      <guid>/publication/2014jserd/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
